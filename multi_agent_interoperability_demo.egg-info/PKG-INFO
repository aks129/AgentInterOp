Metadata-Version: 2.4
Name: multi-agent-interoperability-demo
Version: 1.0.0
Summary: A multi-agent interoperability demo with A2A and MCP protocol support
Author-email: Multi-Agent Demo Team <demo@example.com>
License: MIT
Project-URL: Homepage, https://github.com/example/multi-agent-interoperability-demo
Project-URL: Documentation, https://github.com/example/multi-agent-interoperability-demo#readme
Project-URL: Repository, https://github.com/example/multi-agent-interoperability-demo.git
Project-URL: Bug Tracker, https://github.com/example/multi-agent-interoperability-demo/issues
Keywords: multi-agent,interoperability,a2a,mcp,agents,protocols,healthcare,eligibility
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Internet :: WWW/HTTP :: WSGI :: Application
Classifier: Topic :: Communications
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: flask>=2.3.0
Requires-Dist: flask-socketio>=5.3.0
Requires-Dist: python-socketio>=5.8.0
Requires-Dist: python-engineio>=4.7.0
Requires-Dist: eventlet>=0.33.0
Requires-Dist: requests>=2.31.0
Requires-Dist: python-dateutil>=2.8.0
Requires-Dist: pydantic>=2
Requires-Dist: sse-starlette>=3.0.2
Requires-Dist: jinja2>=3.1.6
Requires-Dist: fastapi>=0.116.1
Requires-Dist: uvicorn[standard]>=0.35.0
Requires-Dist: httpx>=0.28.1
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"

# Multi-Agent Interoperability Demo

This project demonstrates "Language-First Interoperability" between two specialized agents (Applicant and Administrator) that can communicate using multiple protocols while sharing a common conversation state. The system showcases real-time agent interactions for healthcare benefits eligibility processing, specifically focusing on BCS-E (Breast Cancer Screening Eligibility) checking.

## Architecture

- **A2A Protocol**: JSON-RPC 2.0 over HTTP with Server-Sent Events for streaming
- **MCP Protocol**: Model Context Protocol with tool-based interactions
- **Shared Conversation Engine**: Common state management across both protocols
- **FHIR Integration**: Healthcare data processing with proper FHIR resource generation
- **Web UI**: Real-time demonstration interface with protocol switching

## Quick Start

### Run the Server

```bash
uvicorn app.main:app --host 0.0.0.0 --port 8000
```

### Open the UI

Navigate to: **http://localhost:8000/**

## Testing with cURL

### A2A Protocol Tests

**Basic Message Send:**
```bash
curl -s http://localhost:8000/api/a2a/bridge/demo/a2a \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "id": "1",
    "method": "message/send",
    "params": {
      "contextId": "test-context-1",
      "parts": [{"kind": "text", "text": "Hello, please begin BCS-E eligibility check."}]
    }
  }'
```

**Streaming with Server-Sent Events:**
```bash
curl -s http://localhost:8000/api/a2a/bridge/demo/a2a \
  -H "Content-Type: application/json" \
  -H "Accept: text/event-stream" \
  -d '{
    "jsonrpc": "2.0", 
    "id": "2",
    "method": "message/stream",
    "params": {
      "contextId": "test-stream-1",
      "parts": [{"kind": "text", "text": "Start eligibility screening process"}]
    }
  }'
```

### MCP Protocol Tests

**Begin Chat Thread:**
```bash
curl -s http://localhost:8000/api/mcp/begin_chat_thread \
  -H "Content-Type: application/json" \
  -d '{}'
```

**Send Message to Chat Thread:**
```bash
curl -s http://localhost:8000/api/mcp/send_message_to_chat_thread \
  -H "Content-Type: application/json" \
  -d '{
    "conversationId": "your-conversation-id",
    "message": "I need to check BCS-E eligibility for a patient"
  }'
```

**Check Replies:**
```bash
curl -s http://localhost:8000/api/mcp/check_replies \
  -H "Content-Type: application/json" \
  -d '{
    "conversationId": "your-conversation-id"
  }'
```

## Live Demo Script

### Happy Path Demo Flow

1. **Load the UI**: Go to http://localhost:8000/
2. **Select A2A Protocol**: Choose "A2A" radio button
3. **Start Demo**: Click "Start Demo" button
   - ✅ **Administrator** prints requirements: "Please provide age, sex, last mammogram date"
4. **Send Applicant Info**: Click "Send Applicant Info" button  
   - ✅ **Applicant** processes patient data and returns QuestionnaireResponse
   - ✅ **Administrator** evaluates eligibility and returns decision with rationale
   - ✅ **Artifacts** appear on right: QuestionnaireResponse.json and DecisionBundle.json
5. **Switch to MCP**: Toggle to "MCP" protocol and repeat
   - ✅ Same business logic flows through MCP tools instead of A2A JSON-RPC
6. **Download Artifacts**: Click artifact links to view structured FHIR resources

### What to Say (Josh Demo Script)

> "This demonstrates the same business logic running through two different transport protocols. We start with conversational negotiation between agents, generate structured FHIR artifacts, and reach an eligibility decision with transparent provenance. Whether using A2A's JSON-RPC with streaming or MCP's tool-based approach, the underlying conversation engine maintains consistent state and produces the same clinical artifacts."

## BCS-E Eligibility Logic

### Criteria
- **Age**: Patient must be 50-74 years old
- **Gender**: Must be female
- **Recent Mammogram**: Must have mammogram within 27 months of evaluation date

### 27-Month Window Calculation
The system uses precise date arithmetic with `dateutil.relativedelta` to subtract exactly 27 months from the measurement date (default: today). For example:
- Measurement Date: 2024-01-15
- Cutoff Date: 2021-10-15 (27 months prior)
- Mammogram on 2021-11-01: ✅ Valid (within window)
- Mammogram on 2021-09-15: ❌ Invalid (outside window)

## AI Transparency

When the system uses AI-powered document abstraction to extract mammogram dates from unstructured text (DocumentReference resources), it automatically adds transparency metadata:

```json
{
  "meta": {
    "tag": [{
      "system": "https://example.org/ai-transparency",
      "code": "ai-generated", 
      "display": "AI-generated"
    }]
  }
}
```

This ensures clinical decision-makers can identify when AI abstraction was used versus direct structured data.

## Patient Test Cases

### Positive Case (001.json)
- 55-year-old female patient
- Recent mammogram within 27 months
- **Result**: ELIGIBLE with full FHIR artifacts

### Negative Case (001_missing_mammo.json)  
- Same patient demographics
- No recent mammogram or outside 27-month window
- **Result**: NEEDS-MORE-INFO with clinical guidance

## Architecture Notes

The demo simplifies real BCS-E eligibility by focusing on the three core criteria. In production, additional factors like insurance coverage, provider networks, and contraindications would be evaluated. The 27-month window reflects CMS guidelines for breast cancer screening intervals.

The conversation engine maintains identical business logic across both A2A and MCP protocols, demonstrating true protocol-agnostic interoperability for healthcare agent systems.

## Development

```bash
# Install dependencies
pip install fastapi uvicorn python-dateutil

# Run with auto-reload  
uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

# View logs
tail -f logs/app.log
```

## API Endpoints

- `GET /` - Web UI
- `POST /api/a2a/bridge/{config}/a2a` - A2A JSON-RPC endpoint
- `POST /api/mcp/begin_chat_thread` - Start MCP conversation  
- `POST /api/mcp/send_message_to_chat_thread` - Send MCP message
- `POST /api/mcp/check_replies` - Poll MCP responses
- `GET /artifacts/{taskId}/{filename}` - Download FHIR artifacts
- `GET /health` - Health check
