Metadata-Version: 2.4
Name: multi-agent-interoperability-demo
Version: 1.0.0
Summary: A multi-agent interoperability demo with A2A and MCP protocol support
Author-email: Multi-Agent Demo Team <demo@example.com>
License: MIT
Project-URL: Homepage, https://github.com/example/multi-agent-interoperability-demo
Project-URL: Documentation, https://github.com/example/multi-agent-interoperability-demo#readme
Project-URL: Repository, https://github.com/example/multi-agent-interoperability-demo.git
Project-URL: Bug Tracker, https://github.com/example/multi-agent-interoperability-demo/issues
Keywords: multi-agent,interoperability,a2a,mcp,agents,protocols,healthcare,eligibility
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Internet :: WWW/HTTP :: WSGI :: Application
Classifier: Topic :: Communications
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: flask>=2.3.0
Requires-Dist: flask-socketio>=5.3.0
Requires-Dist: python-socketio>=5.8.0
Requires-Dist: python-engineio>=4.7.0
Requires-Dist: eventlet>=0.33.0
Requires-Dist: requests>=2.31.0
Requires-Dist: python-dateutil>=2.8.0
Requires-Dist: pydantic>=2
Requires-Dist: sse-starlette>=3.0.2
Requires-Dist: jinja2>=3.1.6
Requires-Dist: fastapi>=0.116.1
Requires-Dist: uvicorn[standard]>=0.35.0
Requires-Dist: httpx>=0.28.1
Requires-Dist: anthropic>=0.66.0
Requires-Dist: python-dotenv>=1.1.1
Requires-Dist: python-multipart>=0.0.20
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"

# Multi-Agent Interoperability Demo

A comprehensive test bench for multi-agent and FHIR interoperability, featuring dual protocol support (A2A and MCP), real-time FHIR integration, AI-powered narrative processing, and complete decision transparency.

## Features

### Core Capabilities
- **Dual Protocol Support**: A2A (Agent-to-Agent) JSON-RPC and MCP (Model Context Protocol)
- **Real-time FHIR Integration**: Connect to any FHIR server with full API support
- **AI-Powered Narrative Processing**: Convert natural language to structured JSON using Claude
- **Decision Transparency**: Complete trace and telemetry system ("Prove It" panel)
- **Room Export/Import**: Share conversation contexts across systems for external partner interoperability

### Supported Scenarios
- **BCSE**: Benefits Coverage Support Eligibility checking
- **Clinical Trial**: Patient enrollment and eligibility assessment
- **Referral Specialist**: Provider referral workflows
- **Prior Auth**: Prior authorization request processing
- **Custom**: Configurable scenarios for specific use cases

## Quick Start

### Environment Setup

1. Create a `.env` file in the project root:
```bash
# Required for AI narrative processing
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Optional: Session security (auto-generated if not set)
SESSION_SECRET=your_secret_key_here
```

2. Start the application:
```bash
gunicorn --bind 0.0.0.0:5000 --reuse-port --reload main:app
```

3. Open your browser to `http://localhost:5000`

## FHIR Connector

### Setup and Configuration

The FHIR connector enables real-time integration with any FHIR R4-compatible server:

1. **Configure Connection**: In the left panel, enter:
   - **Base URL**: Your FHIR server endpoint (e.g., `https://hapi.fhir.org/baseR4`)
   - **Token**: Optional Bearer token for authentication

2. **Test Connection**: Click "Test Connection" to verify:
   - Server capabilities discovery
   - Authentication validation
   - API compatibility check

### Quick Tests

#### Server Capabilities
```bash
curl -X GET "https://hapi.fhir.org/baseR4/metadata" \
  -H "Accept: application/fhir+json"
```

#### Patient Search
```bash
curl -X GET "https://hapi.fhir.org/baseR4/Patient?name=John&_count=5" \
  -H "Accept: application/fhir+json" \
  -H "Authorization: Bearer YOUR_TOKEN"
```

#### Patient $everything Operation
```bash
curl -X GET "https://hapi.fhir.org/baseR4/Patient/123456/$everything" \
  -H "Accept: application/fhir+json" \
  -H "Authorization: Bearer YOUR_TOKEN"
```

### FHIR Data Ingestion

1. Use the patient search to find relevant records
2. Click "Ingest" to pull complete patient data via `$everything`
3. The system automatically maps FHIR bundles to scenario-specific payloads
4. Toggle "Use Ingested FHIR" in the applicant payload editor

## Narrative → JSON with Claude

Transform natural language descriptions into structured JSON schemas using AI:

### Setup
Ensure `ANTHROPIC_API_KEY` is set in your `.env` file.

### Sample Prior-Auth Narrative
```
Patient John Smith, age 45, requires MRI scan of lumbar spine due to chronic lower back pain persisting for 6 months. Conservative treatments including physical therapy and medication have failed. Patient has BlueCross BlueShield insurance, member ID 12345678. Requesting provider is Dr. Sarah Johnson, NPI 1234567890, at Metro Orthopedic Clinic. Procedure code 72148, estimated cost $2,800. Patient has met deductible, requires prior authorization for coverage.
```

### Usage
1. Enter your narrative in the text area
2. Click "Generate JSON Schema"
3. Review and apply the generated structured data
4. The system converts natural language into properly formatted eligibility payloads

## A2A Protocol API

### Message Streaming
```bash
curl -X POST "http://localhost:5000/api/bridge/demo/a2a" \
  -H "Content-Type: application/json" \
  -H "Accept: text/event-stream" \
  -d '{
    "jsonrpc": "2.0",
    "method": "message/stream",
    "params": {
      "contextId": "ctx_123",
      "parts": [{"kind": "text", "text": "Begin eligibility check"}]
    },
    "id": 1
  }'
```

### Task Resubscription
Reconnect to an existing task and receive all subsequent frames:

```bash
curl -X POST "http://localhost:5000/api/bridge/demo/a2a" \
  -H "Content-Type: application/json" \
  -H "Accept: text/event-stream" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tasks/resubscribe",
    "params": {
      "id": "task_abc123"
    },
    "id": 2
  }'
```

### Task Cancellation
```bash
curl -X POST "http://localhost:5000/api/bridge/demo/a2a" \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tasks/cancel",
    "params": {
      "taskId": "task_abc123"
    },
    "id": 3
  }'
```

## Decision Trace & Telemetry

### "Prove It" Panel

Complete transparency into agent decision-making:

- **Wire Protocol Traces**: See all A2A and MCP message exchanges
- **Decision Points**: Track eligibility determinations and reasoning
- **Performance Metrics**: Monitor response times and processing steps
- **Error Tracking**: Detailed error logs with context

### Usage
1. Start any demo scenario
2. Open the "Prove It" panel in the main interface
3. View real-time trace events as they occur
4. Download complete traces for analysis or audit

### Trace Export
```bash
curl -X GET "http://localhost:5000/api/trace/ctx_123" \
  -H "Accept: application/json"
```

## Room Export/Import

Enable interoperability with external partner systems:

### Export a Room
1. Complete a conversation or scenario
2. Click "Export Room" in the left panel
3. Download the JSON file containing:
   - Context ID and scenario configuration
   - Last applicant payload
   - Conversation state and artifacts metadata
   - Configuration snapshot

### Import a Room
1. Click "Import Room" and select a JSON export file
2. The system creates a new context with imported configuration
3. UI automatically switches to the new imported context
4. Continue the conversation from the imported state

### API Endpoints

#### Export
```bash
curl -X GET "http://localhost:5000/api/room/export/ctx_123" \
  -H "Accept: application/json"
```

#### Import
```bash
curl -X POST "http://localhost:5000/api/room/import" \
  -H "Content-Type: application/json" \
  -d @exported_room.json
```

## Agent Discovery

The system provides an agent card for external discovery at:
```
GET /.well-known/agent-card.json
```

Example response:
```json
{
  "protocolVersion": "0.2.9",
  "preferredTransport": "JSONRPC",
  "capabilities": {"streaming": true},
  "skills": [{
    "id": "scenario",
    "a2a": {
      "config64": "eyJzY2VuYXJpbyI6ImJjc2UiLCJ0YWdzIjpbXX0="
    }
  }],
  "endpoints": {
    "jsonrpc": "https://your-domain.com/api/bridge/demo/a2a"
  }
}
```

## Development

### Project Structure
```
app/
├── config.py              # Configuration management
├── engine.py              # Conversation engine
├── fhir/                  # FHIR integration
│   ├── connector.py       # FHIR client
│   └── service.py         # FHIR operations
├── ingest/                # Data ingestion
│   └── mapper.py          # FHIR to payload mapping
├── llm/                   # AI integration
│   └── anthropic.py       # Claude API client
├── protocols/             # Protocol implementations
│   ├── a2a.py            # A2A JSON-RPC
│   └── mcp.py            # MCP protocol
├── scenarios/             # Scenario definitions
├── store/                 # Data storage
│   └── memory.py         # In-memory storage
└── web/                   # Web interface
    ├── static/
    └── templates/
```

### Configuration
- Runtime configuration stored in `app/config.runtime.json`
- Environment variables loaded from `.env`
- Scenarios and rules defined in `app/scenarios/`

## Security Notes

⚠️ **Important Security Considerations:**

1. **Never commit `.env` files or tokens to version control**
2. **API keys are read from environment variables only**
3. **The agent card is hidden when no public base URL is configured**
4. **Use proper authentication tokens for production FHIR servers**
5. **Room exports may contain sensitive patient data - handle appropriately**

### Example .gitignore entries:
```
.env
*.token
config.runtime.json
*.key
```

## Legacy Demo (Original BCS-E)

### BCS-E Eligibility Logic

#### Criteria
- **Age**: Patient must be 50-74 years old
- **Gender**: Must be female
- **Recent Mammogram**: Must have mammogram within 27 months of evaluation date

#### 27-Month Window Calculation
The system uses precise date arithmetic with `dateutil.relativedelta` to subtract exactly 27 months from the measurement date (default: today). For example:
- Measurement Date: 2024-01-15
- Cutoff Date: 2021-10-15 (27 months prior)
- Mammogram on 2021-11-01: ✅ Valid (within window)
- Mammogram on 2021-09-15: ❌ Invalid (outside window)

## Smoke Test

Complete end-to-end validation of all system features:

### 1) Configure FHIR
- Enter Base URL (e.g., `https://hapi.fhir.org/baseR4`) and leave token blank
- Test Capabilities → success
- Search Patient name="Petersen" → pick an id → Ingest $everything

### 2) Scenario = BCS-E
- Toggle "Use Ingested FHIR" → see Applicant Payload auto-filled
- Start Demo (A2A) → Admin posts requirements
- Send Applicant Info → decision + artifacts; see Trace populate

### 3) Switch to MCP
- Begin chat thread; send message; poll replies → same decision flow

### 4) Narrative → JSON
- Paste narrative of "Prior-Auth for 97110…"
- Convert with Claude → Apply → rerun flow

### 5) Export/Import room
- Export context; Import to new context; confirm continuity

## License

This project is designed for healthcare interoperability testing and demonstration purposes.
