name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    name: CI
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('api/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt
        pip install fastapi[all] pytest
        
    - name: Lint with flake8 (non-blocking)
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat other issues as warnings
        flake8 . --count --max-complexity=15 --max-line-length=100 --statistics || true
        
    - name: Import test - Verify app can be imported
      run: |
        cd $GITHUB_WORKSPACE
        python -c "
        import sys
        sys.path.insert(0, '.')
        try:
            from app.main import app
            print('‚úÖ FastAPI app imports successfully')
            
            # Test agent card endpoint
            from fastapi.testclient import TestClient
            client = TestClient(app)
            response = client.get('/.well-known/agent-card.json')
            assert response.status_code == 200
            data = response.json()
            assert 'name' in data
            assert 'skills' in data
            assert len(data['skills']) > 0
            assert 'a2a.config64' in data['skills'][0]
            print('‚úÖ Agent Card endpoint works')
            
            # Test health endpoint  
            response = client.get('/healthz')
            assert response.status_code == 200
            assert response.json()['ok'] == True
            print('‚úÖ Health endpoint works')
            
            # Test OpenAPI endpoint
            response = client.get('/openapi.json')
            assert response.status_code == 200
            openapi_data = response.json()
            assert 'openapi' in openapi_data
            assert 'paths' in openapi_data
            print('‚úÖ OpenAPI schema works')
            
            print('üéâ All basic tests passed!')
        except Exception as e:
            print(f'‚ùå Test failed: {e}')
            sys.exit(1)
        "
        
    - name: Security scan with bandit (non-blocking)
      run: |
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ || true
        
    - name: Check for secrets
      run: |
        # Simple check for common secrets patterns
        if grep -r "ANTHROPIC_API_KEY.*=" app/ || grep -r "sk-" app/ || grep -r "password.*=" app/; then
          echo "‚ùå Potential secrets found in code"
          exit 1
        fi
        echo "‚úÖ No obvious secrets found"
        
    - name: Verify A2A compliance
      run: |
        cd $GITHUB_WORKSPACE  
        python -c "
        import sys, json
        sys.path.insert(0, '.')
        from app.main import app
        from fastapi.testclient import TestClient
        
        client = TestClient(app)
        response = client.get('/.well-known/agent-card.json')
        data = response.json()
        
        # Verify required A2A fields
        required_fields = ['name', 'description', 'url', 'version', 'capabilities', 'skills']
        for field in required_fields:
            assert field in data, f'Missing required field: {field}'
            
        # Verify no non-standard endpoints at root
        assert 'endpoints' not in data, 'Non-standard endpoints field found at root'
        
        # Verify skills structure
        skill = data['skills'][0]
        skill_fields = ['id', 'name', 'description', 'a2a.config64']
        for field in skill_fields:
            assert field in skill, f'Missing skill field: {field}'
            
        print('‚úÖ A2A Agent Card compliance verified')
        "