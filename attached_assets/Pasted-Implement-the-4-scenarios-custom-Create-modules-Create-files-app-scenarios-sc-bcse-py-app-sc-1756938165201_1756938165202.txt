Implement the 4 scenarios (+ custom)

Create modules:

Create files:
app/scenarios/sc_bcse.py
app/scenarios/sc_clinical_trial.py
app/scenarios/sc_referral_specialist.py
app/scenarios/sc_prior_auth.py
app/scenarios/sc_custom.py

# app/scenarios/sc_bcse.py
from typing import Tuple, List, Dict, Any
from app.eligibility.bcse import evaluate_bcse
LABEL = "Breast Cancer Screening (BCS-E)"
EXAMPLES = [{"age": 56, "sex": "female", "last_mammogram": "2024-05-01"}]

def requirements() -> str:
    return ("Provide: sex, age (or birthDate), and last screening mammogram date "
            "(FHIR Procedure 77067, Observation, or abstracted note).")

def evaluate(applicant_payload: Dict[str, Any], patient_bundle: Dict[str, Any]) -> Tuple[str, str, List[Dict[str, Any]]]:
    decision, rationale, used = evaluate_bcse(patient_bundle, applicant_payload)
    artifacts = used  # already FHIR resources
    return decision, rationale, artifacts

# app/scenarios/sc_clinical_trial.py
from typing import Tuple, List, Dict, Any
from datetime import date
LABEL = "Clinical Trial Matching (Oncology)"
EXAMPLES = [{
  "condition": "metastatic breast cancer",
  "stage": "IV",
  "biomarkers": {"HER2": "positive", "ER": "positive"},
  "age": 56,
  "prior_lines_of_therapy": 2
}]

def requirements() -> str:
    return ("Provide: primary diagnosis, stage, key biomarkers (e.g., HER2/ER/PR), "
            "ECOG performance status if available, prior lines of therapy, and inclusion/exclusion red flags "
            "(e.g., prior T-DXd).")

def evaluate(applicant_payload: Dict[str, Any], patient_bundle: Dict[str, Any]) -> Tuple[str, str, List[Dict[str, Any]]]:
    # Simplified match rule for demo only
    cond = (applicant_payload.get("condition","") or "").lower()
    biomarkers = applicant_payload.get("biomarkers", {})
    lines = applicant_payload.get("prior_lines_of_therapy", 0)
    if "breast" in cond and biomarkers.get("HER2","").lower() in ["positive","pos","+"] and lines <= 2:
        return "eligible", "Matches HER2+ breast trial; â‰¤2 prior lines.", []
    if not cond or not biomarkers:
        return "needs-more-info", "Missing condition or biomarkers.", []
    return "ineligible", "Does not meet simplified biomarker/line criteria.", []

# app/scenarios/sc_referral_specialist.py
from typing import Tuple, List, Dict, Any
LABEL = "Referral to Specialist"
EXAMPLES = [{"specialty":"cardiology", "urgency":"urgent", "patient_prefs":{"distance_max_km":25}}]

def requirements() -> str:
    return ("Provide: specialty, urgency (routine/urgent), patient prefs (distance, language), "
            "and availability windows. Administrator may check capacity and propose slots.")

def evaluate(applicant_payload: Dict[str, Any], patient_bundle: Dict[str, Any]) -> Tuple[str, str, List[Dict[str, Any]]]:
    urgency = (applicant_payload.get("urgency") or "routine").lower()
    # Fake capacity logic: urgent requests get first available; routine may wait
    if urgency == "urgent":
        return "eligible", "Slot proposed in 48 hours at nearest in-network provider.", []
    return "eligible", "Slot proposed next week per routine scheduling.", []

# app/scenarios/sc_prior_auth.py
from typing import Tuple, List, Dict, Any
LABEL = "Prior Authorization"
EXAMPLES = [{"cpt":"97110", "diagnosis":"M54.5", "documentation":["PT_plan.pdf"], "site_of_service":"11"}]

def requirements() -> str:
    return ("Provide: procedure code (CPT/HCPCS), diagnosis (ICD-10), site of service (POS), "
            "and documentation (conservative therapy tried/failed).")

def evaluate(applicant_payload: Dict[str, Any], patient_bundle: Dict[str, Any]) -> Tuple[str, str, List[Dict[str, Any]]]:
    cpt = applicant_payload.get("cpt")
    docs = applicant_payload.get("documentation",[])
    if not cpt:
        return "needs-more-info", "Missing CPT/HCPCS.", []
    if cpt in ["77067","70551"] or ("PT_plan.pdf" in docs):
        return "eligible", "Criteria met or adequate documentation provided.", []
    return "ineligible", "Insufficient documentation for coverage per simplified rule.", []

# app/scenarios/sc_custom.py
from typing import Tuple, List, Dict, Any
from app.config import load_config
LABEL = "Custom (Config-Driven)"
EXAMPLES = [{"note": "Define custom rules in config.scenario.options"}]

def requirements() -> str:
    return ("Provide fields as specified by custom scenario options. "
            "Organizer can edit config.scenario.options to define keys & validations.")

def evaluate(applicant_payload: Dict[str, Any], patient_bundle: Dict[str, Any]) -> Tuple[str, str, List[Dict[str, Any]]]:
    cfg = load_config().scenario.options or {}
    required = cfg.get("required_fields", [])
    for f in required:
        if f not in applicant_payload:
            return "needs-more-info", f"Missing required field: {f}", []
    return cfg.get("decision","eligible"), cfg.get("rationale","Custom rule passed."), []